动态规划：建立动态规划表

eg：当我们用递归实现一个fib 数列时，调用的递归栈,这样做会有大量的fib（4），fib（3）被重复调用，
如果我们记录下重复调用的函数，就可以直接得到答案（通过递推式），而不是反复计算。（ https://www.youtube.com/watch?v=e0CAbRVYAWg ）

                                fib(6)
                    /                          \
                fib(5)                        fib(4)
             /         \                      /     \
         fib(4)        fib(3)              fib(3)   fib(2)    
        /     \       /     \             /     \
    fib(3)  fib(2)  fib(2)   fib(1)    fib(2)   fib(1)
   /     \
fib(2)   fib(1)



本章算法例子：（币值最大化问题，找零问题，硬币收集问题），背包问题和记忆功能，最优二叉查找树，warshall算法和Floyd算法

        币值最大化问题：在书上指的是，只要不选择相邻的硬币条件下，可以拿走任意数量的硬币，问如何求得最大总币值。
                        有n枚硬币，设最大币值F(n)

                        分为两种情况，1.拿走最后一个硬币，总币值为F(n-2)+Cn  
                                     2.不拿走最后一个硬币，总币值为F(n-1)
                                     因此得到递推式 F(n) =max{F(n-2) + Cn , F(n-1)};

        找零问题：

        硬币收集问题：

        背包问题：  
                
                    背包总承重W=5
                    物品 重量 价值
                    1	 2	 12
                    2	 1	 10
                    3	 3	 20
                    4	 2	 15
                    

                    找到最优解，可以把物品分为前i个（i<=n），设F(i,j)为i个物品放入承重为j的背包的最优解。
                    并且沿用币值最大化问题的思想，分为选中第i个和不选中第i个，可以得到递推公式为:
                    F(i,j)=max{F(i-1,j) , F(i-1,j-wi) + vi}
                    
                    可以得出对应的动态规划表：
                        0   1   2   3   4   5  (j)
                    0   0   0   0   0   0   0
                    1   0   0  12  12  12  12
                    2   0  10  12  22  22  22
                    3   0  10  12  22  22  30
                    4   0  10  15  25  27  37
                   (i)

                    因此可得到37时是最优解，此时逆向可以得到，（因为包括4和不包括4时，最大价值不同）
                    一定包括了物体4。

        记忆化：未记忆化的动态规划则是，提前计算出所有的可能，
                而记忆化则是在遇到的时候先访问规划表，
                如果存在解，则直接调用，如果不存在则去计算，并存进表中。


        最优二叉查找树：

        warshall - floyd:  计算传递闭包，计算最短路径